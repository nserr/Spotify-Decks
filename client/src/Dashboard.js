import { useState, useEffect } from 'react'
import useAuth from './useAuth'
import SpotifyWebApi from 'spotify-web-api-node'

import { Container, Row, Col, Image, Spinner, CardDeck, ButtonGroup, ToggleButton, Button, Alert } from 'react-bootstrap'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faSpotify, faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'
import { faSun, faMoon, faUser, faClock, faPlayCircle, faCopyright } from '@fortawesome/free-solid-svg-icons'

import defaultProfilePic from './images/default-profile-pic.png'

import './dashboardStyles.css'

const spotifyApi = new SpotifyWebApi({
    clientId: 'e10bba1aea88476d8577408b7abffcb2',
})

export default function Dashboard({ code }) {
    const accessToken = useAuth(code)

    const [userName, setUserName] = useState()
    const [userURL, setUserURL] = useState()
    const [userImage, setUserImage] = useState()

    const [curGenres, setCurGenres] = useState(new Map())
    const [curArtist, setCurArtist] = useState()
    const [curPopularity, setCurPopularity] = useState()

    const [topArtistsAll, setTopArtistsAll] = useState()
    const [topArtists6M, setTopArtists6M] = useState()
    const [topArtists1M, setTopArtists1M] = useState()
    const [activeArtists, setActiveArtists] = useState()

    const [topTracksAll, setTopTracksAll] = useState()
    const [topTracks6M, setTopTracks6M] = useState()
    const [topTracks1M, setTopTracks1M] = useState()
    const [activeTracks, setActiveTracks] = useState()

    const [timeRange, setTimeRange] = useState('1')
    const [statType, setStatType] = useState('1')
    const [curTheme, setCurTheme] = useState('light')

    const [isLoading, setLoading] = useState(false)
    const [showAlert, setShowAlert] = useState(false)
    const [playlistLink, setPlaylistLink] = useState()


    // Set Access Token and Retrieve User Information
    useEffect(() => {
        if (!accessToken) return

        spotifyApi.setAccessToken(accessToken)

        spotifyApi.getMe().then(res => {
            setUserName(res.body.display_name)
            setUserURL(res.body.external_urls.spotify)
            setUserImage(res.body.images[0].url)
        })

    }, [accessToken])


    // Retrieve User's Top Artists and Tracks
    useEffect(() => {
        if (!accessToken) return

        // Artists
        spotifyApi.getMyTopArtists("time_range=long_term&limit=50").then(res => {
            setTopArtistsAll(res.body.items)
            setActiveArtists(res.body.items)
        })
        spotifyApi.getMyTopArtists("time_range=medium_term&limit=50").then(res => {
            setTopArtists6M(res.body.items)
        })
        spotifyApi.getMyTopArtists("time_range=short_term&limit=50").then(res => {
            setTopArtists1M(res.body.items)
        })

        // Tracks
        spotifyApi.getMyTopTracks("time_range=long_term&limit=50").then(res => {
            setTopTracksAll(res.body.items)
            setActiveTracks(res.body.items)
        })
        spotifyApi.getMyTopTracks("time_range=medium_term&limit=50").then(res => {
            setTopTracks6M(res.body.items)
        })
        spotifyApi.getMyTopTracks("time_range=short_term&limit=50").then(res => {
            setTopTracks1M(res.body.items)
        })

    }, [accessToken])


    function collectGenreStats(artist) {
        const genres = artist.genres
        let count = 0

        genres.map((genre) => {
            if (curGenres.has(genre)) {
                count = curGenres.get(genre)
                curGenres.set(genre, count += 1)
            } else {
                curGenres.set(genre, 1)
            }
        })

        const genreCount = [...curGenres.entries()].reduce((a, b) => b[1] > a[1] ? b : a)

        console.log(genreCount)
    }


    // Create Playlist from Top Songs
    function createPlaylist() {
        setLoading(true)

        const today = new Date()
        const day = today.getDate() < 10 ? `0${today.getDate()}` : today.getDate()
        const month = today.getMonth() < 10 ? `0${today.getMonth() + 1}` : today.getMonth() + 1
        const year = today.getFullYear()

        const date = `${day}/${month}/${year}`

        let playlistTitle = ''
        let playlistDescription = ''

        switch (timeRange) {
            case '1':
                playlistTitle = `My Deck - All-Time (${date})`
                playlistDescription = `My top tracks all-time as of ${date}. Generated by Spotify Decks.`
                break
            case '2':
                playlistTitle = `My Deck - Last 6 Months (${date})`
                playlistDescription = `My top tracks from the last 6 months as of ${date}. Generated by Spotify Decks.`
                break
            case '3':
                playlistTitle = `My Deck - Last Month (${date})`
                playlistDescription = `My top tracks from the last month as of ${date}. Generated by Spotify Decks.`
                break
            default:
                return
        }

        spotifyApi.createPlaylist(playlistTitle, { 'description': playlistDescription, 'public': true })
            .then((res) => {
                const trackURIs = activeTracks.map((track) =>
                    `${track.uri}`
                )

                spotifyApi.addTracksToPlaylist(`${res.body.id}`, trackURIs)

                setPlaylistLink(res.body.external_urls.spotify)
                setLoading(false)
                setShowAlert(true)

            }).catch(err => {
                console.log(err)
            })
    }


    // Create Alert for Playlist Creation
    function PlaylistAlert() {
        if (showAlert) {
            const timeout = setTimeout(() => {
                setShowAlert(false)
            }, [10000])
            return (
                <Alert variant="success" onClose={() => setShowAlert(false)}>
                    <Alert.Heading>Playlist created!</Alert.Heading>
                    <p>
                        Your playlist was successfully created and saved to your Spotify profile. Check it out <Alert.Link href={playlistLink} target="_blank">here</Alert.Link>!
                    </p>
                </Alert>
            )
        } else {
            return null
        }
    }


    // Create Artist Cards
    function ArtistList() {
        curGenres.clear()
        const cards = activeArtists.map((artist) =>
            <div className="card" key={artist.id}>
                {collectGenreStats(artist)}
                <div className="card__content">
                    <div className="card__front" style={{ backgroundImage: `url(${artist.images[0].url})` }}>
                        <h3 className="card__title__artist">{artist.name}</h3>
                        <p className="card__rank">{activeArtists.indexOf(artist) + 1}</p>
                    </div>
                    <div className="card__back">
                        <div className="card__back__row">
                            <p className="card__back__title">{artist.name}</p>
                        </div>
                        {ArtistGenres(artist.genres)}
                        <div className="card__back__row">
                            <p className="card__back__stats" title="Followers"><FontAwesomeIcon icon={faUser} />{" " + artist.followers.total.toLocaleString(navigator.language, { minimumFractionDigits: 0 })}</p>
                            <a className="card__back__link" href={artist.external_urls.spotify} title="View on Spotify" target="_blank"><FontAwesomeIcon icon={faSpotify} size="2x" /></a>
                            <p className="card__back__popularity">Popularity: <strong>{artist.popularity}</strong></p>
                        </div>
                    </div>
                </div>
            </div>
        )

        return (<CardDeck className="card-deck">{cards}</CardDeck>)
    }


    // Create Artist Genre Items
    function ArtistGenres(genres) {
        const artistGenres = genres.map((genre) =>
            <a className="card__back__genre" key={genre} href={`https://open.spotify.com/search/${genre}`} target="_blank" title="View on Spotify">
                {genre}
            </a>
        )

        return (<div className="card__back__genres">{artistGenres}</div>)
    }


    // Create Track Cards
    function TrackList() {
        const cards = activeTracks.map((track) =>
            <div className="card" key={track.id}>
                <div className="card__content">
                    <div className="card__front" style={{ backgroundImage: `url(${track.album.images[0].url})` }}>
                        {TrackNameFormatter(track.name)}
                        <p className="card__rank">{activeTracks.indexOf(track) + 1}</p>
                        <p className="card__artist">{track.artists[0].name}</p>
                    </div>
                    <div className="card__back">
                        <div className="card__back__row">
                            <p className="card__back__title">{track.name}</p>
                        </div>
                        {TrackArtists(track.artists)}
                        <div className="card__back__row">
                            <p className="card__back__stats" title="Duration"><FontAwesomeIcon icon={faClock} />{" " + convertTime(track.duration_ms)}</p>
                            <a className="card__back__link" href={track.external_urls.spotify} title="Play on Spotify" target="_blank"><FontAwesomeIcon icon={faPlayCircle} size="2x" /></a>
                            <p className="card__back__popularity">Popularity: <strong>{track.popularity}</strong></p>
                        </div>
                    </div>
                </div>
            </div>
        )

        return (<CardDeck className="card-deck">{cards}</CardDeck>)
    }


    // Format Track Names With Parentheses
    function TrackNameFormatter(trackName) {
        const regex = /\((.*?)\)/gm

        if (regex.test(trackName)) {
            const splits = trackName.split(regex)
            return (
                <>
                    <h3 className="card__title__track">{splits[0]}</h3>
                    <h3 className="card__title__track" style={{ fontSize: "1.5em" }}>{splits[1]}</h3>
                </>
            )
        }

        return (<h3 className="card__title__track">{trackName}</h3>)
    }


    // Create Artist Genre Items
    function TrackArtists(artists) {
        const trackArtists = artists.map((artist) =>
            <a className="card__back__artist" key={artist.id} href={artist.external_urls.spotify} target="_blank" title="View on Spotify">
                <FontAwesomeIcon icon={faSpotify} size="lg" style={{ marginRight: "0.5em" }} />
                {artist.name}
            </a>
        )

        return (<div className="card__back__artists">{trackArtists}</div>)
    }


    // Convert Duration Time from Milliseconds to Minutes:Seconds
    function convertTime(ms) {
        const m = Math.floor(ms / 60000)
        const s = Math.floor((ms / 1000) % 60)

        let paddingString = ""
        if (s < 10) paddingString = "0"

        return (m + ":" + paddingString + s)
    }


    // Update on Time Range Radio Selection
    function updateTimeRange(selection) {
        setTimeRange(selection)

        switch (selection) {
            case '1':
                setActiveArtists(topArtistsAll)
                setActiveTracks(topTracksAll)
                break
            case '2':
                setActiveArtists(topArtists6M)
                setActiveTracks(topTracks6M)
                break
            case '3':
                setActiveArtists(topArtists1M)
                setActiveTracks(topTracks1M)
                break
            default:
                return
        }
    }


    // Time Range Radio Selection
    function SelectTimeRange() {
        const radios = [
            { name: 'All-Time', value: '1' },
            { name: 'Last 6 Months', value: '2' },
            { name: 'Last Month', value: '3' },
        ]

        return (
            <ButtonGroup toggle>
                {radios.map((radio, idx) => (
                    <ToggleButton
                        className="radio-button"
                        key={idx}
                        type="radio"
                        variant="outline-success"
                        name="radio"
                        value={radio.value}
                        checked={timeRange === radio.value}
                        onChange={(e) => updateTimeRange(e.currentTarget.value)}
                    >
                        {radio.name}
                    </ToggleButton>
                ))}
            </ButtonGroup>
        )
    }


    // Stat Type Radio Selection
    function SelectStatType() {
        const radios = [
            { name: 'Artists', value: '1' },
            { name: 'Tracks', value: '2' },
        ]

        return (
            <ButtonGroup toggle>
                {radios.map((radio, idx) => (
                    <ToggleButton
                        className="radio-button"
                        key={idx}
                        type="radio"
                        variant="outline-success"
                        name="radio"
                        value={radio.value}
                        checked={statType === radio.value}
                        onChange={(e) => setStatType(e.currentTarget.value)}
                    >
                        {radio.name}
                    </ToggleButton>
                ))}
            </ButtonGroup>
        )
    }


    // Theme Radio Selection
    function SelectTheme() {
        const radios = [
            { name: <FontAwesomeIcon icon={faSun} />, value: 'light' },
            { name: <FontAwesomeIcon icon={faMoon} />, value: 'dark' },
        ]

        let variant = (curTheme === 'light') ? 'outline-dark' : 'outline-light'
        document.body.style.backgroundColor = `var(--bg-color-${curTheme})`
        document.body.style.color = `var(--text-color-${curTheme})`

        return (
            <ButtonGroup toggle>
                {radios.map((radio, idx) => (
                    <ToggleButton
                        className="radio-button"
                        key={idx}
                        type="radio"
                        variant={variant}
                        name="radio"
                        value={radio.value}
                        checked={curTheme === radio.value}
                        onChange={(e) => setCurTheme(e.currentTarget.value)}
                    >
                        {radio.name}
                    </ToggleButton>
                ))}
            </ButtonGroup>
        )
    }


    return (
        <div>
            {!activeArtists ? <Spinner animation="border" role="status"></Spinner> :
                <Container className="main">
                    <Container className="user-info">
                        <Row>
                            <Col md="auto">
                                <a href={userURL} title="View on Spotify" target="_blank">
                                    <Image className="user-image" src={userImage ? userImage : defaultProfilePic} roundedCircle />
                                </a>
                            </Col>
                            <Col className="user-name">
                                <p>{userName}'s deck.</p>
                            </Col>
                            <Col md="auto" className="toggle-theme">
                                <SelectTheme />
                            </Col>
                        </Row>
                    </Container>
                    <Container className="lines">
                        <div className="line" style={{ backgroundColor: `var(--line-color-${curTheme})` }}></div>
                        <div className="line" style={{ backgroundColor: 'var(--spotify-green)' }}></div>
                        <div className="line" style={{ backgroundColor: `var(--line-color-${curTheme})` }}></div>
                    </Container>
                    <Container className="radio-container">
                        <SelectStatType />
                        <SelectTimeRange />
                    </Container>
                    <Container className="lines">
                        <div className="line" style={{ backgroundColor: `var(--line-color-${curTheme})` }}></div>
                        <div className="stats">
                            <span className="stat">Most Common Genre:</span>
                            <span className="stat">Average Popularity:</span>
                        </div>
                        <div className="line" style={{ backgroundColor: `var(--line-color-${curTheme})` }}></div>
                    </Container>
                    <Container>
                        {statType == '2' ?
                            <Button className="playlist-button" variant="success" size="lg" onClick={createPlaylist} disabled={isLoading} block>
                                {isLoading ? <Spinner animation="border" role="status"></Spinner> : 'Create Playlist of These Tracks'}
                            </Button> :
                            ''
                        }
                        <PlaylistAlert />
                    </Container>
                    <Container className="list-container">
                        {statType === '1' ? <ArtistList /> : <TrackList />}
                    </Container>
                    <Container className="lines">
                        <div className="line" style={{ backgroundColor: `var(--line-color-${curTheme})` }}></div>
                        <div className="line" style={{ backgroundColor: 'var(--spotify-green)' }}></div>
                        <div className="line" style={{ backgroundColor: `var(--line-color-${curTheme})` }}></div>
                    </Container>
                    <Container className="footer">
                        <div className="footer-row">
                            <FontAwesomeIcon icon={faCopyright} /> {new Date().getFullYear()} Noah Serr
                        </div>
                        <div className="footer-row">
                            <a className="icon-link" href="https://github.com/nserr" target="_blank">
                                <FontAwesomeIcon icon={faGithub} size="lg" />
                            </a>
                            <a className="icon-link" href="https://www.linkedin.com/in/noah-serr-737888197/" target="_blank">
                                <FontAwesomeIcon icon={faLinkedin} size="lg" />
                            </a>
                        </div>
                    </Container>
                </Container>
            }
        </div>
    )
}